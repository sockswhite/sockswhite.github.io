<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Golang基础入门(三)——内建容器</title>
      <link href="/posts/42187256.html"/>
      <url>/posts/42187256.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><p>数量写在类型之前</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="type">int</span>                 <span class="comment">//初始化数组</span></span><br><span class="line">  arr2 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;         <span class="comment">//初始化并给值</span></span><br><span class="line">  arr3 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>&#125; <span class="comment">//自动判断长度</span></span><br><span class="line">  <span class="keyword">var</span> grid [<span class="number">4</span>][<span class="number">5</span>]<span class="type">int</span>              <span class="comment">//二维数组，多维数组类似写法</span></span><br><span class="line">  fmt.Println(arr1, arr2, arr3)</span><br><span class="line">  fmt.Println(grid)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>[0 0 0 0 0] [1 2 3] [1 2 3 4 6]<br>[[0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0]]</p></div><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  arr2 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;         <span class="comment">//初始化并给值</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//传统写法</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr2); i++ &#123;</span><br><span class="line">    fmt.Println(arr2[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//range,i为索引，v为值，range可以用在map</span></span><br><span class="line">  <span class="keyword">for</span> i, v := <span class="keyword">range</span> arr2 &#123;</span><br><span class="line">    fmt.Println(i, v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>数组是<code>值类型</code>，作为函数入参时，也是<strong>值传递</strong>。<code>[10]int</code>和<code>[20]int</code>是不同的类型</p></div><h2 id="切片（Slice）"><a href="#切片（Slice）" class="headerlink" title="切片（Slice）"></a>切片（Slice）</h2><h3 id="切片的定义和初始化"><a href="#切片的定义和初始化" class="headerlink" title="切片的定义和初始化"></a>切片的定义和初始化</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//1.声明一个未定义大小的数组来定义切片</span></span><br><span class="line">  <span class="keyword">var</span> slice []<span class="type">int</span></span><br><span class="line">  <span class="comment">//[]</span></span><br><span class="line">  fmt.Println(slice)</span><br><span class="line">  <span class="comment">//2.使用make()函数定义切片</span></span><br><span class="line">  length := <span class="number">4</span></span><br><span class="line">  <span class="comment">//2.1.指定长度</span></span><br><span class="line">  slice1 := <span class="built_in">make</span>([]<span class="type">int</span>, length)</span><br><span class="line">  <span class="comment">//[0 0 0 0]</span></span><br><span class="line">  fmt.Println(slice1)</span><br><span class="line">  <span class="comment">//2.2.指定长度和容量</span></span><br><span class="line">  capacity := <span class="number">8</span></span><br><span class="line">  slice2 := <span class="built_in">make</span>([]<span class="type">int</span>, length, capacity)</span><br><span class="line">  <span class="comment">//[0 0 0 0]</span></span><br><span class="line">  fmt.Println(slice2)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化切片，切片是数组的抽象体现</span></span><br><span class="line">  arr := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>&#125;</span><br><span class="line">  <span class="comment">//全窗口</span></span><br><span class="line">  <span class="comment">//[1 2 3 4 5 6 8]</span></span><br><span class="line">  fmt.Println(arr[:])</span><br><span class="line">  <span class="comment">//前片段，切片是前闭后开的区间，索引从0开始</span></span><br><span class="line">  <span class="comment">//[1 2 3 4 5 6]</span></span><br><span class="line">  fmt.Println(arr[:<span class="built_in">len</span>(arr)<span class="number">-1</span>])</span><br><span class="line">  <span class="comment">//后片段</span></span><br><span class="line">  <span class="comment">//[3 4 5 6 8]</span></span><br><span class="line">  fmt.Println(arr[<span class="number">2</span>:])</span><br><span class="line">  <span class="comment">//中间截取</span></span><br><span class="line">  <span class="comment">//[3 4]</span></span><br><span class="line">  fmt.Println(arr[<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p><strong>数组</strong> 和 <strong>切片（Slice）</strong>的区别在于，定义切片不需要指定长度size，如果给定了size，那么这个变量属于 <strong>数组</strong></p></div><h3 id="切片概念和原理"><a href="#切片概念和原理" class="headerlink" title="切片概念和原理"></a>切片概念和原理</h3><div class="note info flat"><p><strong>切片（slice）</strong>是对<strong>数组</strong>的抽象。可以看成是在数组上滑动的窗口（view）</p></div><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Before update...&quot;</span>)</span><br><span class="line">  fmt.Println(arr)</span><br><span class="line">  fmt.Println(<span class="string">&quot;After update...&quot;</span>)</span><br><span class="line">  updateSlice(arr[<span class="number">2</span>:])</span><br><span class="line">  fmt.Println(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把切片首位改成0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateSlice</span><span class="params">(slice []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">  slice[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note success flat"><p>Before update…<br>[0 1 2 3 4 5 6]<br>After update…<br>[0 1 100 3 4 5 6]</p></div><h3 id="切片的拓展"><a href="#切片的拓展" class="headerlink" title="切片的拓展"></a>切片的拓展</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line">  s1 := arr[<span class="number">2</span>:<span class="number">6</span>] <span class="comment">//[2 3 4 5]</span></span><br><span class="line">  fmt.Println(s1)</span><br><span class="line">  <span class="comment">//Reslice 子切片</span></span><br><span class="line">  s2 := s1[<span class="number">2</span>:<span class="number">4</span>] <span class="comment">//[4 5]</span></span><br><span class="line">  fmt.Println(s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>s1的值为[2 3 4 5]，s2的值为[4 5]</p></li><li><p>slice可以向后扩展，不可以向前扩展</p></li><li><p>s[i]不可以超越len(s)，所以s向后扩展不可以超越底层数组的cap(s)</p></li></ul><p><img src="https://s2.loli.net/2022/06/10/Z6Ivpign8kKAtoU.png" alt="微信截图_20220610232701.png"></p><h3 id="切面的操作"><a href="#切面的操作" class="headerlink" title="切面的操作"></a>切面的操作</h3><h4 id="添加元素（append）"><a href="#添加元素（append）" class="headerlink" title="添加元素（append）"></a>添加元素（append）</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">  s1 := arr[<span class="number">2</span>:<span class="number">6</span>] <span class="comment">//[2 3 4 5]</span></span><br><span class="line">  s2 := s1[<span class="number">3</span>:<span class="number">5</span>]  <span class="comment">//[5 6]</span></span><br><span class="line">  s3 := <span class="built_in">append</span>(s2, <span class="number">10</span>)</span><br><span class="line">  s4 := <span class="built_in">append</span>(s3, <span class="number">11</span>)</span><br><span class="line">  s5 := <span class="built_in">append</span>(s4, <span class="number">12</span>)</span><br><span class="line">  fmt.Println(<span class="string">&quot;s3,s4,s5 = &quot;</span>, s3, s4, s5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>s3,s4,s5 =  [5 6 10] [5 6 10 11] [5 6 10 11 12]</p><p>arr =  [0 1 2 3 4 5 6 10]</p></div><ul><li><code>append</code>在操作Slice时，如果没有超出原数组 <code>arr</code>的容量<code>cap</code>，则会覆盖后续的元素，<u><strong>反之，则会重新分配更大的底层数组。</strong></u></li><li><code>append</code>由于是值传递的关系，必须接收 <code>返回值</code></li></ul><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  s1 := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;</span><br><span class="line">  s2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">  fmt.Println(<span class="string">&quot;Copy Slice...&quot;</span>)</span><br><span class="line">  <span class="built_in">copy</span>(s2, s1)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;slice len=%v,cap=%v,s2=%v \n\r&quot;</span>, <span class="built_in">len</span>(s2), <span class="built_in">cap</span>(s2), s2)</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;Deleting from slice...&quot;</span>)</span><br><span class="line">  s3 := <span class="built_in">append</span>(s2[:<span class="number">3</span>], s2[<span class="number">4</span>:]...) <span class="comment">//切片可变参数使用...</span></span><br><span class="line">  fmt.Println(s3)</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;Popping from front...&quot;</span>)</span><br><span class="line">  s4 := s3[<span class="number">1</span>:]</span><br><span class="line">  fmt.Println(s4)</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;Popping from back...&quot;</span>)</span><br><span class="line">  s5 := s4[:<span class="built_in">len</span>(s4)<span class="number">-1</span>]</span><br><span class="line">  fmt.Println(s5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>Copy Slice…<br>slice len=8,cap=8,s2=[2 4 6 8 0 0 0 0]<br>Deleting from slice…<br>[2 4 6 0 0 0 0]<br>Popping from front…<br>[4 6 0 0 0 0]<br>Popping from back…<br>[4 6 0 0 0]</p></div>]]></content>
      
      
      <categories>
          
          <category> Go开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言学习笔记 </tag>
            
            <tag> Golang基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang基础入门(二)</title>
      <link href="/posts/5e107f4a.html"/>
      <url>/posts/5e107f4a.html</url>
      
        <content type="html"><![CDATA[<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="if语句（）"><a href="#if语句（）" class="headerlink" title="if语句（）"></a><strong>if</strong>语句（<mark class="hl-label red">if后面不接括号</mark> ）</h4><div class="tabs" id="if写法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#if写法-1">写法1</button></li><li class="tab"><button type="button" data-href="#if写法-2">写法2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="if写法-1"><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile1</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">  <span class="comment">//Go语言可以返回多个变量值</span></span><br><span class="line">  contents, err := ioutil.ReadFile(filename)</span><br><span class="line">  <span class="keyword">if</span> err == <span class="literal">nil</span> &#123; <span class="comment">//if不加括号</span></span><br><span class="line">    fmt.Println(contents)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println( err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="if写法-2"><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile2</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">  <span class="comment">//类似于for的写法，但是contents和err只能在if这个代码块里使用</span></span><br><span class="line">  <span class="keyword">if</span> contents, err := ioutil.ReadFile(filename); err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(contents)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><div class="tabs" id="写法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#写法-1">写法 1</button></li><li class="tab"><button type="button" data-href="#写法-2">写法 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="写法-1"><div class="note info flat"><p><code>switch</code>自动<code>break</code>，不想<code>break</code>需要使用<code>fallthrough</code></p></div><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两个整数的四则运算</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="title">eval</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>, operator <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">     <span class="keyword">var</span> result <span class="type">int</span></span><br><span class="line">     <span class="keyword">switch</span> operator &#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">       result = a + b</span><br><span class="line">     <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">       result = a - b</span><br><span class="line">     <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">       result = a * b</span><br><span class="line">     <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">       result = a / b</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">       <span class="built_in">panic</span>(<span class="string">&quot;unrecognized operator &quot;</span> + operator)</span><br><span class="line">     &#125;</span><br><span class="line">     fmt.Printf(<span class="string">&quot;final result is %d\n&quot;</span>, result)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="写法-2"><div class="note info flat"><p><code>switch</code>可以没有表达式，<code>case</code>里面可以使用<mark class="hl-label red">判断条件</mark> </p></div><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">grade</span><span class="params">(score <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">     grade := <span class="string">&quot;&quot;</span></span><br><span class="line">     <span class="keyword">switch</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> score &lt; <span class="number">60</span> &amp;&amp; score &gt; <span class="number">0</span>: <span class="comment">//大于0小于60</span></span><br><span class="line">       grade = <span class="string">&quot;F&quot;</span></span><br><span class="line">     <span class="keyword">case</span> score &lt; <span class="number">70</span>: <span class="comment">//大于等于60小于70</span></span><br><span class="line">       grade = <span class="string">&quot;D&quot;</span></span><br><span class="line">     <span class="keyword">case</span> score &lt; <span class="number">80</span>: <span class="comment">//大于等于70小于80</span></span><br><span class="line">       grade = <span class="string">&quot;C&quot;</span></span><br><span class="line">     <span class="keyword">case</span> score &lt; <span class="number">90</span>: <span class="comment">//大于等于80小于90</span></span><br><span class="line">       grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">     <span class="keyword">case</span> score &lt; <span class="number">100</span>: <span class="comment">//大于等于90小于100</span></span><br><span class="line">       grade = <span class="string">&quot;A&quot;</span></span><br><span class="line">     <span class="keyword">case</span> score == <span class="number">100</span>: <span class="comment">//满分</span></span><br><span class="line">    grade = <span class="string">&quot;S&quot;</span></span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">       <span class="built_in">panic</span>(<span class="string">&quot;illegal score &quot;</span> + <span class="type">string</span>(score))</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> grade</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><div class="note info flat"><p><code>Golang</code>只有<code>for</code>，没有<code>while</code>，<code>do-while</code>之类的语句</p></div><div class="tabs" id="写法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#写法-1">写法 1</button></li><li class="tab"><button type="button" data-href="#写法-2">写法 2</button></li><li class="tab"><button type="button" data-href="#写法-3">写法 3</button></li><li class="tab"><button type="button" data-href="#写法-4">写法 4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="写法-1"><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//累加器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">accumulator</span><span class="params">()</span></span> &#123;</span><br><span class="line">  result := <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++ &#123;</span><br><span class="line">    result += i</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="写法-2"><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(</span><br><span class="line">      convertToBin(<span class="number">5</span>),</span><br><span class="line">      convertToBin(<span class="number">13</span>),</span><br><span class="line">      convertToBin(<span class="number">8472819</span>),</span><br><span class="line">   )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//整数转换成二进制</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertToBin</span><span class="params">(n <span class="type">int</span>)</span></span> (result <span class="type">string</span>) &#123;</span><br><span class="line">   <span class="keyword">for</span> ; n &gt; <span class="number">0</span>; n = n / <span class="number">2</span> &#123;</span><br><span class="line">      result = strconv.Itoa(n%<span class="number">2</span>) + result</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><div class="note success simple"><p>101 1101 100000010100100011110011</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="写法-3"><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逐行打印文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printFile</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">  in, err := os.Open(filename)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  scanner := bufio.NewScanner(in)</span><br><span class="line">  <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">    fmt.Println(scanner.Text())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="写法-4"><p>​```golang<br>//死循环<br>func forever() {<br>    for {<br>        fmt.Println(“hello world”)<br>    }<br>}<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab for-range的写法 --&gt;</span><br><span class="line"></span><br><span class="line">```golang</span><br><span class="line">//可变参数</span><br><span class="line">func sumArgs(arr ...int) int &#123;</span><br><span class="line">  sum := 0</span><br><span class="line">    // 第一个是索引，第二个是值</span><br><span class="line">  for _, v := range arr &#123;</span><br><span class="line">    sum += v</span><br><span class="line">  &#125;</span><br><span class="line">  return sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><p><code>Go</code>函数定义结构如下图所示</p><p><img src="https://s2.loli.net/2022/05/31/oL31afZ4Jtiuj7C.png" alt="image.png"></p><div class="note info flat"><p><code>Go</code>里面函数可以返回多个值</p></div><div class="tabs" id="写法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#写法-1">写法 1</button></li><li class="tab"><button type="button" data-href="#写法-2">写法 2</button></li><li class="tab"><button type="button" data-href="#写法-3">抛出异常</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="写法-1"><div class="note warning modern"><p>函数返回多个值并声明变量名，只使用在简单的函数返回</p></div><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整数除法,可以直接定义函数返回变量名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(a, b <span class="type">int</span>)</span></span> (q, r <span class="type">int</span>) &#123;</span><br><span class="line">  q = a / b</span><br><span class="line">  r = a % b</span><br><span class="line">  <span class="keyword">return</span> q, r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="写法-2"><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两数交换，值定义函数返回变量类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> b, a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="写法-3"><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两个整数的四则运算,返回整数和异常</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval2</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>, operator <span class="type">string</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> operator &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">    <span class="keyword">return</span> a + b, <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">    <span class="keyword">return</span> a - b, <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">    <span class="keyword">return</span> a * b, <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">    <span class="keyword">return</span> a / b, <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">&quot;unrecognized operator %s&quot;</span>, operator)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><div class="note info flat"><p><code>Go</code>语言中，函数可以当成<strong>入参/返参</strong>，函数支持<strong>可变参数</strong>，没有<del><strong>默认参数</strong></del>，<del><strong>可选参数</strong></del>，<del><strong>函数重载</strong></del>，<del><strong>操作符重载</strong></del>的概念，也没有花哨的<code>lambda</code>用法</p></div><div class="tabs" id="函数用法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#函数用法-1">函数式编程</button></li><li class="tab"><button type="button" data-href="#函数用法-2">可变参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="函数用法-1"><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用函数调用函数</span></span><br><span class="line"><span class="comment">//函数是一等公民，可以作为入参，出参等</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(op <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>), a, b <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    pointer := reflect.ValueOf(op).Pointer()</span><br><span class="line">    opName := runtime.FuncForPC(pointer).Name()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Calling function %s with args[%d,%d]\n&quot;</span>, opName, a, b)</span><br><span class="line">    <span class="comment">//对于不想获取的参数可以用下划线代替</span></span><br><span class="line">    _, res := op(a, b)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(apply(swap, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="comment">//匿名函数的写法</span></span><br><span class="line">    fmt.Println(apply(<span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> b, a</span><br><span class="line">    &#125;, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><div class="note success flat"><p>Calling function main.swap with args[11,2]</p><p>11</p><p>Calling function main.main.func1 with args[11,2]</p><p>11</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="函数用法-2"><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumArgs</span><span class="params">(arr ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  sum := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 第一个是索引，第二个是值</span></span><br><span class="line">  <span class="keyword">for</span> _, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    sum += v</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><div class="note info flat"><p>Golang的指针不能进行运算，所以Golang的指针相对简单</p></div><h4 id="指针示例"><a href="#指针示例" class="headerlink" title="指针示例"></a>指针示例</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">2</span> <span class="comment">//初始化a</span></span><br><span class="line">  <span class="keyword">var</span> pa *<span class="type">int</span> = &amp;a <span class="comment">//取a的指针地址</span></span><br><span class="line">  *pa = <span class="number">3</span> <span class="comment">//修改a的值</span></span><br><span class="line">  fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><div class="note success flat"><p>3</p></div><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><div class="note orange icon flat"><i class="note-icon fa fa-solid fa-circle-question"></i><p><code>值传递</code>还是<code>引用传递</code>？</p></div><p>Golang只有<code>值传递</code>，需要引用传递只能使用指针。验证代码</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a, b <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">  a, b = b, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  a, b := <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">  swap(a, b)</span><br><span class="line">  fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><div class="note success flat"><p>1 2</p></div><p>如果需要将<code>a</code>，<code>b</code>的值互换，可以参照<a href="#函数">函数</a>中的<code>swap</code>写法或使用<code>指针</code></p>]]></content>
      
      
      <categories>
          
          <category> Go开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言学习笔记 </tag>
            
            <tag> Golang基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang基础入门(一)</title>
      <link href="/posts/f121e428.html"/>
      <url>/posts/f121e428.html</url>
      
        <content type="html"><![CDATA[<h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><h4 id="变量一旦定义就有默认值"><a href="#变量一旦定义就有默认值" class="headerlink" title="变量一旦定义就有默认值"></a>变量一旦定义就有<strong>默认值</strong></h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableZeroValue</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">  <span class="keyword">var</span> b <span class="type">string</span></span><br><span class="line">  <span class="comment">//打印空字符串可以用%q</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;%d,%q&quot;</span>, a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><span id="more"></span><blockquote><p>0,””</p></blockquote><h4 id="变量赋初值"><a href="#变量赋初值" class="headerlink" title="变量赋初值"></a>变量赋初值</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableInitialValue</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a, b <span class="type">int</span> = <span class="number">1</span>, <span class="number">3</span></span><br><span class="line">  <span class="keyword">var</span> c <span class="type">string</span> = <span class="string">&quot;Hello Go!&quot;</span></span><br><span class="line">  fmt.Println(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>1 3 Hello Go!</p></blockquote><h4 id="自动检测变量类型"><a href="#自动检测变量类型" class="headerlink" title="自动检测变量类型"></a>自动检测变量类型</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableTypeDeduction</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a, b, c, d = <span class="number">1</span>, <span class="number">3</span>, <span class="literal">true</span>, <span class="string">&quot;def&quot;</span></span><br><span class="line">  fmt.Println(a, b, c, d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简洁写法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableShorter</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//首次出现可以使用冒号声明变量并赋值</span></span><br><span class="line">  a, b, c, d := <span class="number">1</span>, <span class="number">3</span>, <span class="literal">true</span>, <span class="string">&quot;def&quot;</span></span><br><span class="line">  <span class="comment">//之后赋值不可以再用冒号</span></span><br><span class="line">  b = <span class="number">5</span></span><br><span class="line">  fmt.Println(a, b, c, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>1 3 true def </p><p>1 5 true def </p></blockquote><h4 id="包变量"><a href="#包变量" class="headerlink" title="包变量"></a>包变量</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  aa = <span class="number">11</span></span><br><span class="line">  bb = <span class="string">&quot;def&quot;</span></span><br><span class="line">  cc = <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(aa,bb,cc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>11 def true </p></blockquote><h3 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h3><ul><li><p><code>bool</code>, <code>string</code></p></li><li><p><code>(u)int</code>, <code>(u)int8</code>,<code>(u)int16</code>, <code>(u)int32</code>, <code>(u)int64</code>, <code>uintptr</code></p></li><li><p><code>byte</code>(8bit), <code>rune</code>(32bit)</p></li><li><p><code>float32</code>, <code>float64</code>, <code>complex64</code>, <code>complex128</code></p><ul><li><p><code>complex</code>小练习：验证欧拉公式 $e^{πi} + 1=0$</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">euler</span><span class="params">()</span></span> &#123;</span><br><span class="line">     fmt.Printf(<span class="string">&quot;%.3f \n\r&quot;</span>, cmplx.Exp(<span class="number">1i</span>*math.Pi)+<span class="number">1</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果：</p><blockquote><p>(0.000+0.000i)</p></blockquote></li></ul></li></ul><h3 id="类型强制转换"><a href="#类型强制转换" class="headerlink" title="类型强制转换"></a>类型强制转换</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">triangle</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a, b <span class="type">int</span> = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">  <span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">  c = <span class="type">int</span>(math.Sqrt(<span class="type">float64</span>(a*a + b*b)))</span><br><span class="line">  fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>5</p></blockquote><h3 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也可以定义在包里</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  filename1 = <span class="string">&quot;efg.txt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consts</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">const</span> (</span><br><span class="line">    filename = <span class="string">&quot;abc.txt&quot;</span></span><br><span class="line">    <span class="comment">//常量不指定类型，可以作为各种类型使用</span></span><br><span class="line">    a, b = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">  c = <span class="type">int</span>(math.Sqrt(a*a + b*b))</span><br><span class="line">  fmt.Println(filename, filename1, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>abc.txt efg.txt 5</p></blockquote><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>Golang中没有枚举类型关键字，使用常量定义枚举值</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">enums</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">const</span> (</span><br><span class="line">    <span class="comment">//iota是自增值，也可以直接赋值</span></span><br><span class="line">    cpp = <span class="literal">iota</span></span><br><span class="line">    <span class="comment">//下划线代表跳过这一个自增值</span></span><br><span class="line">    _</span><br><span class="line">    python</span><br><span class="line">    php</span><br><span class="line">    javascript</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">const</span> (</span><br><span class="line">    b = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">    kb</span><br><span class="line">    mb</span><br><span class="line">    gb</span><br><span class="line">    tb</span><br><span class="line">    pb</span><br><span class="line">  )</span><br><span class="line">  fmt.Println(cpp, python, php, javascript)</span><br><span class="line">  fmt.Println(b, kb, mb, gb, tb, pb)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>0 2 3 4<br>1 1024 1048576 1073741824 1099511627776 1125899906842624</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言学习笔记 </tag>
            
            <tag> Golang基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
