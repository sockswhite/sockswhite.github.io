<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang基础</title>
    <url>/2022/05/22/Golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><ol>
<li><p>变量一旦定义就有<strong>默认值</strong></p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableZeroValue</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="type">string</span></span><br><span class="line">	<span class="comment">//打印空字符串可以用%q</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d,%q&quot;</span>, a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<span id="more"></span>

<blockquote>
<p>0,””</p>
</blockquote>
</li>
<li><p>变量赋初值</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableInitialValue</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b <span class="type">int</span> = <span class="number">1</span>, <span class="number">3</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="type">string</span> = <span class="string">&quot;Hello Go!&quot;</span></span><br><span class="line">	fmt.Println(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<blockquote>
<p>1 3 Hello Go!</p>
</blockquote>
</li>
<li><p>自动检测变量类型</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableTypeDeduction</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b, c, d = <span class="number">1</span>, <span class="number">3</span>, <span class="literal">true</span>, <span class="string">&quot;def&quot;</span></span><br><span class="line">	fmt.Println(a, b, c, d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简洁写法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableShorter</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//首次出现可以使用冒号声明变量并赋值</span></span><br><span class="line">	a, b, c, d := <span class="number">1</span>, <span class="number">3</span>, <span class="literal">true</span>, <span class="string">&quot;def&quot;</span></span><br><span class="line">	<span class="comment">//之后赋值不可以再用冒号</span></span><br><span class="line">	b = <span class="number">5</span></span><br><span class="line">	fmt.Println(a, b, c, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<blockquote>
<p>1 3 true def </p>
<p>1 5 true def </p>
</blockquote>
</li>
<li><p>包变量</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	aa = <span class="number">11</span></span><br><span class="line">	bb = <span class="string">&quot;def&quot;</span></span><br><span class="line">	cc = <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(aa,bb,cc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<blockquote>
<p>11 def true</p>
</blockquote>
</li>
</ol>
<h3 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h3><ul>
<li><p><code>bool</code>, <code>string</code></p>
</li>
<li><p><code>(u)int</code>, <code>(u)int8</code>,<code> (u)int16</code>, <code>(u)int32</code>, <code>(u)int64</code>, <code>uintptr</code></p>
</li>
<li><p><code>byte</code>(8bit), <code>rune</code>(32bit)</p>
</li>
<li><p><code>float32</code>, <code>float64</code>, <code>complex64</code>, <code>complex128</code></p>
<ul>
<li><p><code>complex</code>小练习：验证欧拉公式 $e^{πi} + 1&#x3D;0$</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">euler</span><span class="params">()</span></span> &#123;</span><br><span class="line">   	fmt.Printf(<span class="string">&quot;%.3f \n\r&quot;</span>, cmplx.Exp(<span class="number">1i</span>*math.Pi)+<span class="number">1</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果：</p>
<blockquote>
<p>(0.000+0.000i)</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="类型强制转换"><a href="#类型强制转换" class="headerlink" title="类型强制转换"></a>类型强制转换</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">triangle</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b <span class="type">int</span> = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">	c = <span class="type">int</span>(math.Sqrt(<span class="type">float64</span>(a*a + b*b)))</span><br><span class="line">	fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<blockquote>
<p>5</p>
</blockquote>
<h3 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">//也可以定义在包里</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	filename1 = <span class="string">&quot;efg.txt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consts</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		filename = <span class="string">&quot;abc.txt&quot;</span></span><br><span class="line">		<span class="comment">//常量不指定类型，可以作为各种类型使用</span></span><br><span class="line">		a, b = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">	c = <span class="type">int</span>(math.Sqrt(a*a + b*b))</span><br><span class="line">	fmt.Println(filename, filename1, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<blockquote>
<p>abc.txt efg.txt 5</p>
</blockquote>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>Golang中没有枚举类型关键字，使用常量定义枚举值</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">enums</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		<span class="comment">//iota是自增值，也可以直接赋值</span></span><br><span class="line">		cpp = <span class="literal">iota</span></span><br><span class="line">		<span class="comment">//下划线代表跳过这一个自增值</span></span><br><span class="line">		_</span><br><span class="line">		python</span><br><span class="line">		php</span><br><span class="line">		javascript</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		b = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">		kb</span><br><span class="line">		mb</span><br><span class="line">		gb</span><br><span class="line">		tb</span><br><span class="line">		pb</span><br><span class="line">	)</span><br><span class="line">	fmt.Println(cpp, python, php, javascript)</span><br><span class="line">	fmt.Println(b, kb, mb, gb, tb, pb)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<blockquote>
<p>0 2 3 4<br>1 1024 1048576 1073741824 1099511627776 1125899906842624</p>
</blockquote>
]]></content>
      <categories>
        <category>Golang笔记</category>
      </categories>
      <tags>
        <tag>Go语言学习笔记</tag>
        <tag>Golang基础知识</tag>
      </tags>
  </entry>
</search>
